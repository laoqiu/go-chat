// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/chat.proto

/*
Package go_micro_srv_chat is a generated protocol buffer package.

It is generated from these files:
	proto/chat.proto

It has these top-level messages:
	RegisterRequest
	RegisterResponse
	UnregisterRequest
	UnregisterResponse
	UsersRequest
	UsersResponse
	RoomsRequest
	RoomsResponse
	JoinRequest
	JoinResponse
	OutRequest
	OutResponse
	SendRequest
	SendResponse
	StreamRequest
	StreamResponse
	Event
	Room
	User
	Client
*/
package go_micro_srv_chat

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Chat service

type ChatService interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...client.CallOption) (*RegisterResponse, error)
	Unregister(ctx context.Context, in *UnregisterRequest, opts ...client.CallOption) (*UnregisterResponse, error)
	Users(ctx context.Context, in *UsersRequest, opts ...client.CallOption) (*UsersResponse, error)
	Rooms(ctx context.Context, in *RoomsRequest, opts ...client.CallOption) (*RoomsResponse, error)
	Join(ctx context.Context, in *JoinRequest, opts ...client.CallOption) (*JoinResponse, error)
	Out(ctx context.Context, in *OutRequest, opts ...client.CallOption) (*OutResponse, error)
	Send(ctx context.Context, in *SendRequest, opts ...client.CallOption) (*SendResponse, error)
	Stream(ctx context.Context, in *StreamRequest, opts ...client.CallOption) (Chat_StreamService, error)
}

type chatService struct {
	c    client.Client
	name string
}

func NewChatService(name string, c client.Client) ChatService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.srv.chat"
	}
	return &chatService{
		c:    c,
		name: name,
	}
}

func (c *chatService) Register(ctx context.Context, in *RegisterRequest, opts ...client.CallOption) (*RegisterResponse, error) {
	req := c.c.NewRequest(c.name, "Chat.Register", in)
	out := new(RegisterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatService) Unregister(ctx context.Context, in *UnregisterRequest, opts ...client.CallOption) (*UnregisterResponse, error) {
	req := c.c.NewRequest(c.name, "Chat.Unregister", in)
	out := new(UnregisterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatService) Users(ctx context.Context, in *UsersRequest, opts ...client.CallOption) (*UsersResponse, error) {
	req := c.c.NewRequest(c.name, "Chat.Users", in)
	out := new(UsersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatService) Rooms(ctx context.Context, in *RoomsRequest, opts ...client.CallOption) (*RoomsResponse, error) {
	req := c.c.NewRequest(c.name, "Chat.Rooms", in)
	out := new(RoomsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatService) Join(ctx context.Context, in *JoinRequest, opts ...client.CallOption) (*JoinResponse, error) {
	req := c.c.NewRequest(c.name, "Chat.Join", in)
	out := new(JoinResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatService) Out(ctx context.Context, in *OutRequest, opts ...client.CallOption) (*OutResponse, error) {
	req := c.c.NewRequest(c.name, "Chat.Out", in)
	out := new(OutResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatService) Send(ctx context.Context, in *SendRequest, opts ...client.CallOption) (*SendResponse, error) {
	req := c.c.NewRequest(c.name, "Chat.Send", in)
	out := new(SendResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatService) Stream(ctx context.Context, in *StreamRequest, opts ...client.CallOption) (Chat_StreamService, error) {
	req := c.c.NewRequest(c.name, "Chat.Stream", &StreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &chatServiceStream{stream}, nil
}

type Chat_StreamService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*StreamResponse, error)
}

type chatServiceStream struct {
	stream client.Stream
}

func (x *chatServiceStream) Close() error {
	return x.stream.Close()
}

func (x *chatServiceStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *chatServiceStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *chatServiceStream) Recv() (*StreamResponse, error) {
	m := new(StreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Chat service

type ChatHandler interface {
	Register(context.Context, *RegisterRequest, *RegisterResponse) error
	Unregister(context.Context, *UnregisterRequest, *UnregisterResponse) error
	Users(context.Context, *UsersRequest, *UsersResponse) error
	Rooms(context.Context, *RoomsRequest, *RoomsResponse) error
	Join(context.Context, *JoinRequest, *JoinResponse) error
	Out(context.Context, *OutRequest, *OutResponse) error
	Send(context.Context, *SendRequest, *SendResponse) error
	Stream(context.Context, *StreamRequest, Chat_StreamStream) error
}

func RegisterChatHandler(s server.Server, hdlr ChatHandler, opts ...server.HandlerOption) error {
	type chat interface {
		Register(ctx context.Context, in *RegisterRequest, out *RegisterResponse) error
		Unregister(ctx context.Context, in *UnregisterRequest, out *UnregisterResponse) error
		Users(ctx context.Context, in *UsersRequest, out *UsersResponse) error
		Rooms(ctx context.Context, in *RoomsRequest, out *RoomsResponse) error
		Join(ctx context.Context, in *JoinRequest, out *JoinResponse) error
		Out(ctx context.Context, in *OutRequest, out *OutResponse) error
		Send(ctx context.Context, in *SendRequest, out *SendResponse) error
		Stream(ctx context.Context, stream server.Stream) error
	}
	type Chat struct {
		chat
	}
	h := &chatHandler{hdlr}
	return s.Handle(s.NewHandler(&Chat{h}, opts...))
}

type chatHandler struct {
	ChatHandler
}

func (h *chatHandler) Register(ctx context.Context, in *RegisterRequest, out *RegisterResponse) error {
	return h.ChatHandler.Register(ctx, in, out)
}

func (h *chatHandler) Unregister(ctx context.Context, in *UnregisterRequest, out *UnregisterResponse) error {
	return h.ChatHandler.Unregister(ctx, in, out)
}

func (h *chatHandler) Users(ctx context.Context, in *UsersRequest, out *UsersResponse) error {
	return h.ChatHandler.Users(ctx, in, out)
}

func (h *chatHandler) Rooms(ctx context.Context, in *RoomsRequest, out *RoomsResponse) error {
	return h.ChatHandler.Rooms(ctx, in, out)
}

func (h *chatHandler) Join(ctx context.Context, in *JoinRequest, out *JoinResponse) error {
	return h.ChatHandler.Join(ctx, in, out)
}

func (h *chatHandler) Out(ctx context.Context, in *OutRequest, out *OutResponse) error {
	return h.ChatHandler.Out(ctx, in, out)
}

func (h *chatHandler) Send(ctx context.Context, in *SendRequest, out *SendResponse) error {
	return h.ChatHandler.Send(ctx, in, out)
}

func (h *chatHandler) Stream(ctx context.Context, stream server.Stream) error {
	m := new(StreamRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.ChatHandler.Stream(ctx, m, &chatStreamStream{stream})
}

type Chat_StreamStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*StreamResponse) error
}

type chatStreamStream struct {
	stream server.Stream
}

func (x *chatStreamStream) Close() error {
	return x.stream.Close()
}

func (x *chatStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *chatStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *chatStreamStream) Send(m *StreamResponse) error {
	return x.stream.Send(m)
}
